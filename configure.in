#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.61)
AC_INIT(ohm-plugins-misc, 0.1)
AC_CONFIG_SRCDIR([plugins/profile/profile.c])

DOC_SUPPORT_INIT()

AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AC_CONFIG_HEADER([include/config.h])

# libtool
LT_CURRENT=2
LT_REVISION=0
LT_AGE=0
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

# Disable static libraries.
AC_DISABLE_STATIC

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AM_PROG_CC_C_O
AM_PROG_LIBTOOL
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)
AC_PROG_LEX
AC_PROG_YACC
AM_PROG_LEX
AC_SUBST(LEXLIB)

# Enable extra GCC flags.
if test "$GCC" = "yes"; then
    CPPFLAGS="$CPPFLAGS -Wall -Wformat -Wextra"
fi

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h netinet/in.h stdlib.h string.h sys/socket.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_CHECK_FUNCS([dup2 localtime_r memmove memset socket strchr strdup strerror strrchr strtoul])

# Check for xlib (videoep)
PKG_CHECK_MODULES(X11, x11)
AC_SUBST(X11_CFLAGS)
AC_SUBST(X11_LIBS)

# Checks for glib and gobject.
PKG_CHECK_MODULES(GLIB, glib-2.0 gobject-2.0)
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)

# Checks for gmodule.
PKG_CHECK_MODULES(GMODULE, gmodule-2.0)
AC_SUBST(GMODULE_CFLAGS)
AC_SUBST(GMODULE_LIBS)

# Checks for DBUS.
PKG_CHECK_MODULES(DBUS, dbus-glib-1 >= 0.70 dbus-1 >= 0.70)
AC_SUBST(DBUS_CFLAGS)
AC_SUBST(DBUS_LIBS)

# Checks for HAL.
PKG_CHECK_MODULES(HAL, hal >= 0.5.7)
AC_SUBST(HAL_CFLAGS)
AC_SUBST(HAL_LIBS)

# Checks for GConf.
PKG_CHECK_MODULES(GCONF, gconf-2.0 >= 2.16.0)
AC_SUBST(GCONF_CFLAGS)
AC_SUBST(GCONF_LIBS)

# Checks for xcb xcbxv xcbrandr
PKG_CHECK_MODULES(XCB, xcb)
AC_SUBST(XCB_CFLAGS)
AC_SUBST(XCB_LIBS)

PKG_CHECK_MODULES(XCBXV, xcb-xv)
AC_SUBST(XCBXV_CFLAGS)
AC_SUBST(XCBXV_LIBS)

PKG_CHECK_MODULES(XCBRANDR, xcb-randr)
AC_SUBST(XCBRANDR_CFLAGS)
AC_SUBST(XCBRANDR_LIBS)

# Checks for bluez (for fmradio).
PKG_CHECK_MODULES(BLUEZ, bluez)
AC_SUBST(BLUEZ_CFLAGS)
AC_SUBST(BLUEZ_LIBS)

# Checks for libohmplugin and libohmfact.
PKG_CHECK_MODULES(LIBOHMPLUGIN, libohmplugin)
AC_SUBST(LIBOHMPLUGIN_CFLAGS)
AC_SUBST(LIBOHMPLUGIN_LIBS)

PKG_CHECK_MODULES(LIBOHMFACT, libohmfact)
AC_SUBST(LIBOHMFACT_CFLAGS)
AC_SUBST(LIBOHMFACT_LIBS)

PKG_CHECK_MODULES(LIBDRES, libdres)
AC_SUBST(LIBDRES_CFLAGS)
AC_SUBST(LIBDRES_LIBS)

# PKG_CHECK_MODULES(LIBXSLT, libxslt >= 1.1.19)
# AC_SUBST(LIBXSLT_CFLAGS)
# AC_SUBST(LIBXSLT_LIBS)

# OHM build compatibility variables.
AC_SUBST(OHM_PLUGIN_CFLAGS, "$LIBOHMPLUGIN_CFLAGS $LIBOHMFACT_CFLAGS $GLIB_CFLAGS $DBUS_CFLAGS $GMODULE_CFLAGS")
AC_SUBST(OHM_PLUGIN_LIBS, "$LIBOHMPLUGIN_LIBS $LIBOHMFACT_LIBS $GLIB_LIBS $DBUS_LIBS $GMODULE_LIBS")

AC_SUBST(OHM_CONF_DIR, "\$(sysconfdir)/ohm")
AC_SUBST(OHM_PLUGIN_CONF_DIR, "\$(OHM_CONF_DIR)/plugins.d")
AC_SUBST(OHM_PLUGIN_DIR, "\$(libdir)/ohm")

# Check for libprofile.
PKG_CHECK_MODULES(LIBPROFILE, profile >= 0.0.3,
                              [has_libprofile=true], [has_libprofile=false])
AM_CONDITIONAL(HAVE_LIBPROFILE, test x$has_libprofile = xtrue)

AC_SUBST(LIBPROFILE_CFLAGS)
AC_SUBST(LIBPROFILE_LIBS)

if test x$has_libprofile = xtrue;
then
  AC_MSG_NOTICE([Profile plugin WILL BE built.])
else
  AC_MSG_NOTICE([profile plugin WILL NOT BE be built.])
fi

# Check for mission-control (for telephony plugins).
MISSION_CONTROL_REQUIRED=5.0.beta39
PKG_CHECK_MODULES(LIBMISSIONCONTROL, 
                  mission-control >= $MISSION_CONTROL_REQUIRED,
                  [has_mc=true], [has_mc=false])

AC_SUBST(LIBMISSIONCONTROL_CFLAGS)
AC_SUBST(LIBMISSIONCONTROL_LIBS)

if test x$has_mc = xtrue;
then
  pluginlibdir="`$PKG_CONFIG --variable=pluginlibdir mission-control`"
fi
AC_SUBST(pluginlibdir)

# Check for telepathy (for telephony plugins).
PKG_CHECK_MODULES(LIBTELEPATHY, telepathy-glib,
		  [has_libtp=true], [has_libtp=false])
AC_SUBST(LIBTELEPATHY_CFLAGS)
AC_SUBST(LIBTELEPATHY_LIBS)

AM_CONDITIONAL(BUILD_TELEPHONY,
               test x$has_mc = xtrue -a x$has_libtp = xtrue)

if test x$has_mc = xtrue -a x$has_libtp = xtrue;
then
  AC_MSG_NOTICE([Telephony plugins WILL BE built.])
else
  AC_MSG_NOTICE([Telephony plugins WILL NOT be built.])
fi

# Check if playback plugin/libplayback support is enabled, or disabled
AC_ARG_ENABLE(libplayback,
              [  --enable-libplayback     enable playback plugin],
              enable_libplayback=$enableval,enable_libplayback=no)

AM_CONDITIONAL(BUILD_PLAYBACK, test x$enable_libplayback = xyes)

if test x$enable_libplayback = xyes;
then
  AC_DEFINE([BUILD_PLAYBACK], 1, [Build playback plugin ?])
  AC_MSG_NOTICE([playback plugin WILL BE built])
else
  AC_MSG_NOTICE([playback plugin WILL NOT be built])
fi

AC_SUBST(BUILD_PLAYBACK)

# Check if resource plugin should be/can be built
PKG_CHECK_MODULES(LIBRESOURCE, libresource0,
			       [has_libresource=yes],
			       [has_libresource=no])

AC_SUBST(LIBRESOURCE_CFLAGS)
AC_SUBST(LIBRESOURCE_LIBS)

AC_ARG_ENABLE(libresource,
              [  --enable-libresource     enable libresource support],
              enable_libresource=$enableval,enable_libresource=auto)

if test x$enable_libresource = xyes -a \
        x$has_libresource = xno;
then
  AC_MSG_ERROR([libresource required but not available])
fi

AM_CONDITIONAL(BUILD_RESOURCE, test x$has_libresource = xyes -a \
                                      x$enable_libresource != xno)
if test x$has_libresource = xyes -a \
        x$enable_libresource != xno;
then
  AC_DEFINE([BUILD_RESOURCE], 1, [Build resource plugin ?])
  AC_MSG_NOTICE([resource and media plugin WILL BE built])
else
  AC_MSG_NOTICE([resource and media plugin WILL NOT be built])
fi

AC_SUBST(BUILD_RESOURCE)


# Check if notification plugin should be built
AC_ARG_ENABLE(notification,
              [  --enable-notification     enable notification plugin],
              enable_notification=$enableval,enable_notification=auto)

if test x$enable_notification = xyes -a \
        x$has_libresource = xno;
then
  AC_MSG_ERROR([libresource required by notification but not available])
fi

AM_CONDITIONAL(BUILD_NOTIFICATION, test x$has_libresource = xyes -a \
                                       x$enable_notification != xno)
if test x$has_libresource = xyes -a \
        x$enable_notification != xno;
then
  AC_DEFINE([BUILD_NOTIFICATION], 1, [Build notification plugin ?])
  AC_MSG_NOTICE([notification support WILL BE built])
else
  AC_MSG_NOTICE([notification support WILL NOT be built])
fi

AC_SUBST(BUILD_NOTIFICATION)


dnl -----------------------------------
dnl - Videoep selection
dnl -----------------------------------
AC_ARG_ENABLE(oldvideoep,
              [  --enable-oldvideoep    enable old videoep],
              enable_oldvideoep=$enableval,enable_oldvideoep=no)

AM_CONDITIONAL(BUILD_OLD_VIDEOEP, test x$enable_oldvideoep = xyes)

if test x$enable_oldvideoep = xyes;
then
  AC_DEFINE([BUILD_OLD_VIDEOEP], 1, [Build old videoep ?])
  AC_MSG_NOTICE([Old videoep implementation will be built])
else
  AC_MSG_NOTICE([New videoep implementation will be built])
fi

AC_SUBST(BUILD_OLD_VIDEOEP)


# Check for sp-timestamps.
PKG_CHECK_MODULES(SP_TIMESTAMP, sp_timestamp,
                              [has_sp_timestamp=true],
                              [has_stp_timestamp=false])
AM_CONDITIONAL(HAVE_SP_TIMESTAMP, test x$has_sp_timestamp = xtrue)
if test x$has_sp_timestamp = xtrue;
then
  AC_MSG_NOTICE([SP timestamp plugin WILL BE built.])
else
  AC_MSG_NOTICE([SP timestamp plugin WILL NOT BE be built.])
fi


# Check for libosso with swap pressure notification.
AC_ARG_ENABLE([swap-pressure-notify],
    AS_HELP_STRING([--disable-swap-pressure-notify],[Disable swap pressure notification support]),
        [
            case "${enableval}" in
                yes) swappressure=yes ;;
                no) swappressure=no ;;
                *) AC_MSG_ERROR(bad value ${enableval} for --disable-swap-pressure-notify) ;;
            esac
        ],
        [swappressure=auto])

if test "x${swappressure}" != xno ; then
    PKG_CHECK_MODULES(LIBOSSO, [libosso],
        HAVE_LIBOSSO=1,
        [
            HAVE_LIBOSSO=0
            if test "x$swappressure" = xyes ; then
                AC_MSG_ERROR([*** libosso dependencies not found])
            fi
        ])
else
    HAVE_LIBOSSO=0
fi

if test "x${HAVE_LIBOSSO}" = x1 -a -f /usr/include/ioq-notify.h; then
   swappressure=yes
   AC_DEFINE([HAVE_OSSO_SWAP_PRESSURE], 1, [Have OSSO swap pressure notification?])
   AC_MSG_NOTICE([OSSO swap pressure notification support ENABLED.])
   AC_SUBST(LIBOSSO_CFLAGS)
   AC_SUBST(LIBOSSO_LIBS)
else
   swappressure=no
   AC_MSG_NOTICE([OSSO swap pressure notification support DISABLED.])
fi

AC_SUBST(HAVE_OSSO_SWAP_PRESSURE)
AM_CONDITIONAL([HAVE_OSSO_SWAP_PRESSURE], [test "x$swappressure" = xyes])

# Check for MCE.
PKG_CHECK_MODULES(MCE, mce, [has_mce=yes], [mas_mce=no])
AC_SUBST(MCE_CFLAGS)
AC_SUBST(MCE_LIBS)

if test x$has_mce = xyes;
then
  AC_DEFINE([HAVE_MCE], 1, [Have MCE support ?])
fi

AM_CONDITIONAL(HAVE_MCE, test "x$has_mce" = "xyes")
AC_SUBST(HAVE_MCE)

# Check for Immersion TouchSense
AC_MSG_CHECKING([for Immersion TouchSense library])
if test -f /usr/include/ImmVibe.h;
then
  has_immts=yes
else
  has_immts=no
fi
AC_MSG_RESULT($has_immts)

AM_CONDITIONAL(HAVE_IMMTS, test "x$has_immts" = "xyes")
AC_SUBST(HAVE_IMMTS)

AC_CONFIG_FILES([debian/Makefile
                 Makefile
                 plugins/Makefile
                 plugins/accessories/Makefile
                 plugins/console/Makefile
                 plugins/gconf/Makefile
                 plugins/hal/Makefile
                 plugins/hal/tests/Makefile
                 plugins/playback/Makefile
                 plugins/resource/Makefile
		 plugins/media/Makefile
		 plugins/notification/Makefile
                 plugins/profile/Makefile
                 plugins/profile/tests/Makefile
                 plugins/signaling/Makefile
                 plugins/signaling/tests/Makefile
                 plugins/signaling/libep/Makefile
                 plugins/telephony/Makefile
                 plugins/telephony/ohm/Makefile
                 plugins/telephony/mission-control/Makefile
                 plugins/videoep/Makefile
                 plugins/videoep-fremantle/Makefile
                 plugins/dvfs/Makefile
		 plugins/sensors/Makefile
		 plugins/timestamp/Makefile
		 plugins/cgroups/Makefile
		 plugins/vibra/Makefile
		 plugins/backlight/Makefile
		 plugins/delay/Makefile
		 plugins/buttons/Makefile
		 plugins/apptrack/Makefile
		 plugins/fmradio/Makefile
		 ohm-session-agent/Makefile
 		 doc/Makefile])
AC_OUTPUT
